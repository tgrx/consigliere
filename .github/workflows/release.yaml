name: 'Release'

on:
  push:
    branches:
      - version-0.0.1a1

  workflow_dispatch:


env:
  PIPENV_VENV_IN_PROJECT: '1'


jobs:

  dist:
    name: 'The distribution is built.'

    runs-on: 'ubuntu-latest'

    outputs:
      version: ${{ steps.get-version.outputs.result }}

    steps:

      - name: '🧱 The code is pulled from the repository.'
        uses: actions/checkout@v2

      - name: '🐍 Python is set up.'
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: 'x64'

      - name: '☁️ The whole Python is cached.'
        id: cache-python
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: cache-python-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('Pipfile.lock') }}-dev

      - name: '🪛 Pipenv is installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          pip install pipenv

      - name: '🔋 The development dependencies are installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          make venv-deploy-all

      - name: '📚 The library distribution is built.'
        run: |
          make build

      - name: '🏷 The library version is set as the output.'
        id: get-version
        run: |
          echo "::set-output name=result::$(make get-version)"

      - name: '🚦 The commit message points to the current library version.'
        if: ${{ github.ref == 'refs/heads/version-0.0.1a1' }}
        uses: actions/github-script@v3
        with:
          script: |
            if (
              !github.event
              || !github.event.head_commit
              || (github.event.head_commit.message != steps.get-version.outputs.result)
            ){
              console.log('event:', core.toJSON(github.event));
              console.log('source version:', steps.get-version.outputs.result);
              console.log('commit message:', github.event.head_commit.message);
              core.setFailed(
                core.format(
                  'commit message "{0}" != lib version "{1}"',
                  github.event.head_commit.message,
                  steps.get-version.outputs.result,
                )
              );
            }

      - name: '📦 The library distribution is uploaded as an artifact.'
        uses: actions/upload-artifact@v2
        with:
          name: consigliere-${{ steps.get-version.outputs.result }}
          path: dist/


  test-dist:
    name: 'The library distribution passes all tests.'

    runs-on: ${{ matrix.os }}

    needs:
      - dist

    strategy:
      matrix:
        os:
          - 'macos-latest'
          - 'ubuntu-latest'
          - 'windows-latest'
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'

    steps:

      - name: '🧱 The code is pulled from the repository.'
        uses: actions/checkout@v2

      - name: '🪚 The library sources are deleted from the working directory.'
        uses: JesseTG/rm@v1.0.2
        with:
          path: consigliere

      - name: '🐍 Python is set up.'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: '☁️ The whole Python is cached.'
        id: cache-python
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: cache-python-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('Pipfile.lock') }}

      - name: '🪛 Pipenv is installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          pip install pipenv

      - name: '🛢 The dependencies are installed.'
        if: ${{ !steps.cache-python.outputs.cache-hit }}
        run: |
          make venv-deploy

      - name: '📦 The library distribution artifact is downloaded.'
        uses: actions/download-artifact@v2
        with:
          name: consigliere-${{ needs.dist.outputs.version }}
          path: dist/

      - name: '🕋 The library is installed from distribution (normal OS)'
        if: ${{ !contains(matrix.os, 'windows') }}
        run: |
          pip install dist/consigliere-${{ needs.dist.outputs.version }}.tar.gz

      - name: '🕋 The library is installed from distribution (Windows)'
        if: ${{ contains(matrix.os, 'windows') }}
        run: |
          pip install dist\consigliere-${{ needs.dist.outputs.version }}.tar.gz

      - name: '🚦 The library distribution passes all tests.'
        run: make tests


  test-deploy:
    name: 'The library is deployed on test PyPI.'

    needs:
      - dist

    runs-on: 'ubuntu-latest'

    steps:

      - name: '📦 The library distribution artifact is downloaded.'
        uses: actions/download-artifact@v2
        with:
          name: consigliere-${{ needs.dist.outputs.version }}
          path: dist/

      - name: '🔷 A new library version is uploaded on test PyPI.'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: xxx-${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true


  deploy:
    name: 'The library is deployed on PyPI.'

    if: ${{ github.ref == 'refs/heads/version-0.0.1a1' }}

    needs:
      - test-dist
      - test-deploy

    runs-on: 'ubuntu-latest'

    steps:

      - name: '📦 The library distribution artifact is downloaded.'
        uses: actions/download-artifact@v2
        with:
          name: consigliere-${{ needs.dist.outputs.version }}
          path: dist/

      - name: '💎 A new library version is uploaded on PyPI.'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: xxx-${{ secrets.PYPI_TOKEN }}
          verbose: true
